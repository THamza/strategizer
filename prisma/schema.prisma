generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id                String       @id @default(cuid())
  name              String
  industry          String
  targetAudience    String
  marketingGoals    String
  budget            String
  availableChannels String
  competitors       String
  USP               String
  additionalInfo    String       @db.VarChar(5000)
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  isCompleted       Boolean      @default(false)
  isVisible         Boolean      @default(true)
  isDeleted         Boolean      @default(false)
  seoKeywords       SeoKeyword[]
  posts             Post[]
  tasks             Task[]
  calendars         Calendar[]
  suggestions       Suggestion[]
  prompts           Prompt[]
  Video             Video[]
}

model SeoKeyword {
  id        String  @id @default(cuid())
  keyword   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Video {
  id          String        @id @default(cuid())
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id])
  scripts     VideoScript[]
  storyboards Storyboard[]

  @@index([projectId])
}

model VideoScript {
  id      String @id @default(cuid())
  content String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@index([videoId])
}

model Storyboard {
  id      String @id @default(cuid())
  content String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@index([videoId])
}

model Post {
  id        String  @id @default(cuid())
  content   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Task {
  id          String    @id @default(cuid())
  description String
  startDate   DateTime
  endDate     DateTime
  calendar    Calendar? @relation(fields: [calendarId], references: [id])
  calendarId  String?
  isCompleted Boolean   @default(false)
  isVisible   Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([calendarId])
}

model Calendar {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]

  @@index([projectId])
}

model Suggestion {
  id        String  @id @default(cuid())
  content   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Prompt {
  id        String  @id @default(cuid())
  query     String
  type      String
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@index([projectId])
}
