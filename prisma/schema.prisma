// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Project {
  id                String       @id @default(cuid())
  name              String
  industry          String
  targetAudience    String
  marketingGoals    String
  budget            String
  availableChannels String
  competitors       String
  usp               String
  additionalInfo    String       @db.VarChar(5000)
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  isCompleted       Boolean      @default(false)
  isVisible         Boolean      @default(true)
  isDeleted         Boolean      @default(false)
  seoKeywords       SeoKeyword[]
  posts             Post[]
  tasks             Task[]
  calendars         Calendar[]
  suggestions       Suggestion[]
  Video             Video[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SeoKeyword {
  id        String  @id @default(cuid())
  keyword   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([projectId])
}

model Video {
  id          String        @id @default(cuid())
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id])
  scripts     VideoScript[]
  storyboards Storyboard[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([projectId])
}

model VideoScript {
  id      String @id @default(cuid())
  content String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([videoId])
}

model Storyboard {
  id      String @id @default(cuid())
  content String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([videoId])
}

model Post {
  id        String  @id @default(cuid())
  content   String  @db.Text
  projectId String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Task {
  id          String    @id @default(cuid())
  description String
  startDate   DateTime
  endDate     DateTime
  calendar    Calendar? @relation(fields: [calendarId], references: [id])
  calendarId  String?
  isCompleted Boolean   @default(false)
  isVisible   Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([projectId])
  @@index([calendarId])
}

model Calendar {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([projectId])
}

model Suggestion {
  id        String  @id @default(cuid())
  content   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@index([projectId])
}